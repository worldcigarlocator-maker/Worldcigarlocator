<!-- Backoffice Home Final | Excel Style | Inline Edit | 2025-10-14 -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Backoffice ‚Äî Home (Final)</title>
  <script type="module" src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm"></script>
  <style>
    :root{
      /* Excel-inspired UI (no gold here, except on frontend data badges/stars) */
      --primary:#2f78c4;
      --primary-dark:#2466a8;
      --success:#1d8348;
      --warning:#b36e00;
      --danger:#c0392b;
      --bg:#f5f6f8;
      --card:#ffffff;
      --text:#1f2937;
      --muted:#6b7280;
      --border:#e5e7eb;

      /* Frontend data accents (keep gold) */
      --gold:#b8860b;
      --gold-dark:#a37408;

      /* Compact scale (~40% tighter than default) */
      --base-font:10.5px;
      --radius:10px;
      --gap:.6rem;
      --pad:.65rem;
      --shadow:0 1px 3px rgba(0,0,0,.06);
    }
    *{box-sizing:border-box}
    body{font-family:Arial, Helvetica, sans-serif;background:var(--bg);margin:0;padding:1.1rem;color:var(--text);font-size:var(--base-font);line-height:1.35}

    /* Header */
    h1{margin:0 0 .9rem;text-align:center;font-weight:800;color:#2b2b2b;font-size:1.35rem}

    /* Top Nav (Excel style) */
    .top-bar{display:flex;justify-content:center;align-items:center;gap:.4rem;flex-wrap:wrap;margin-bottom:.9rem}
    .top-bar button{
      background:#fff;border:1.4px solid var(--primary);color:var(--primary);
      padding:.34rem .55rem;border-radius:7px;font-weight:800;cursor:pointer;font-size:.92rem
    }
    .top-bar button:hover{background:var(--primary);color:#fff}
    .top-bar button.active{background:var(--primary);color:#fff;border-color:transparent}

    /* Meta row */
    .meta-row{ text-align:center; color:var(--muted); margin-bottom:.6rem; font-size:.95rem;}

    /* Grid of cards */
    .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(290px,1fr));gap:var(--gap)}
    .card{
      background:var(--card);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);
      overflow:hidden;display:flex;flex-direction:column
    }
    .thumb{width:100%;height:160px;object-fit:cover;background:#f3f4f6}
    .card-content{padding:var(--pad);flex:1}

    /* Badges ‚Äî KEEP GOLD on frontend data */
    .badges{display:flex;gap:.35rem;flex-wrap:wrap;margin:0 0 .35rem}
    .badge{display:inline-block;padding:.2rem .55rem;border-radius:999px;font-size:.85rem;font-weight:800;color:#fff}
    .badge.store{background:#007bff}
    .badge.lounge{background:#28a745}
    .badge.other{background:#ff8c00}
    .badge.flag{background:#c0392b}
    /* Gold accent for rating and lounge access line */
    .rating{color:var(--gold);margin-top:.25rem;font-weight:800}
    .access-line{color:var(--gold);font-size:.92rem;margin:.15rem 0}

    .small{color:var(--muted);font-size:.9rem}
    .date{font-size:.85rem;color:#9ca3af;margin-top:.25rem}

    /* Buttons row */
    .btn-row{display:flex;gap:.4rem;padding:0 var(--pad) var(--pad)}
    .btn{
      flex:1;background:#fff;border:1.4px solid var(--primary);color:var(--primary);
      padding:.42rem .55rem;border-radius:7px;font-weight:800;cursor:pointer;font-size:.92rem;text-align:center
    }
    .btn:hover{background:var(--primary);color:#fff}
    .btn.approve{border-color:var(--success);color:var(--success)}
    .btn.approve:hover{background:var(--success);color:#fff}
    .btn.flag{border-color:#ff8c00;color:#ff8c00}
    .btn.flag:hover{background:#ff8c00;color:#fff}
    .btn.delete{border-color:var(--danger);color:var(--danger)}
    .btn.delete:hover{background:var(--danger);color:#fff}
    .btn.restore{border-color:var(--success);color:var(--success)}
    .btn.restore:hover{background:var(--success);color:#fff}
    .btn.save{border-color:var(--success);color:var(--success)}
    .btn.save:hover{background:var(--success);color:#fff}
    .btn.cancel{border-color:var(--muted);color:#374151}
    .btn.cancel:hover{background:#374151;color:#fff}

    /* Inline edit form (compact) */
    .edit-wrap{
      margin-top:.5rem;padding:var(--pad);background:#f9fafb;border:1px solid var(--border);border-radius:8px
    }
    .form-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:.5rem}
    .form-grid .full{grid-column:1 / -1}
    label{font-weight:800;font-size:.85rem;color:#374151;margin-bottom:.15rem;display:block}
    input[type="text"], input[type="url"], input[type="tel"]{
      width:100%;padding:.42rem .55rem;border:1.4px solid var(--primary);border-radius:7px;font-size:.92rem
    }
    .type-group, .access-group, .stars{display:flex;gap:.5rem;flex-wrap:wrap;align-items:center}
    .type-pill{
      display:inline-flex;gap:.35rem;align-items:center;border:1.4px solid var(--primary);
      padding:.28rem .55rem;border-radius:999px;cursor:pointer;font-weight:800;color:var(--primary);user-select:none
    }
    .type-pill.active{background:var(--primary);color:#fff}
    .star{font-size:1.15rem;cursor:pointer;color:#d1d5db}
    .star.on{color:var(--gold)}
    .access-group input{margin-right:.25rem}

    /* Trash extras */
    .trash-status{font-size:.92rem;margin-top:.35rem}
    .time-remaining{color:var(--warning)}
    .expired{color:var(--danger)}

    /* Toasts */
    #toast-container{position:fixed;bottom:1rem;right:1rem;display:flex;flex-direction:column;gap:.45rem;z-index:9999}
    .toast{background:#333;color:#fff;padding:.6rem .9rem;border-radius:8px;box-shadow:0 2px 6px rgba(0,0,0,.2)}
    .toast.success{background:var(--success)}
    .toast.error{background:var(--danger)}
    .toast.info{background:var(--primary)}
  </style>
</head>
<body>
  <h1>Backoffice ‚Äî Home</h1>

  <!-- Top navigation (filters) -->
  <div class="top-bar">
    <button class="active" data-view="home">Home</button>
    <button data-view="approved">Approved</button>
    <button data-view="pending">Pending</button>
    <button data-view="flagged">Flagged</button>
    <button data-view="trash">Trash</button>
    <button onclick="window.location.href='backoffice-business-analytics-final.html'">Business</button>
  </div>

  <div class="meta-row" id="metaRow"></div>
  <div class="grid" id="storeGrid"></div>
  <div id="toast-container"></div>

  <script type="module">
    /* ---------- Supabase Client ---------- */
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";
    const supabase = createClient(
      "https://gbxxoeplkzbhsvagnfsr.supabase.co",
      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdieHhvZXBsa3piaHN2YWduZnNyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2NjQ1MDAsImV4cCI6MjA3MzI0MDUwMH0.E4Vk-GyLe22vyyfRy05hZtf4t5w_Bd_B-tkEFZ1alT4"
    );

    /* ---------- State ---------- */
    const grid = document.getElementById("storeGrid");
    const metaRow = document.getElementById("metaRow");
    let currentView = "home"; // home/approved/pending/flagged/trash

    /* ---------- Routing buttons ---------- */
    document.querySelectorAll(".top-bar button[data-view]").forEach(btn=>{
      btn.addEventListener("click", ()=>{
        document.querySelectorAll(".top-bar button").forEach(b=>b.classList.remove("active"));
        btn.classList.add("active");
        route(btn.dataset.view);
      });
    });

    route("home");

    /* ---------- Router ---------- */
    async function route(view){
      currentView = view;
      metaRow.textContent = "";
      grid.innerHTML = "";

      if (view === "home") loadStores({ excludeDeleted:true, title:"All Active Locations" });
      if (view === "approved") loadStores({ approved:true, title:"Approved" });
      if (view === "pending") loadStores({ approved:false, title:"Pending" });
      if (view === "flagged") loadStores({ flagged:true, title:"Flagged" });
      if (view === "trash") loadTrash();
    }

    /* ---------- Loaders ---------- */
    async function loadStores(opts={}){
      let query = supabase.from("stores").select("*").order("created_at", { ascending:false });
      if (opts.excludeDeleted) query = query.or("status.is.null,status.neq.deleted");
      if (opts.approved === true) query = query.eq("approved", true).or("status.is.null,status.neq.deleted");
      if (opts.approved === false) query = query.eq("approved", false).or("status.is.null,status.neq.deleted");
      if (opts.flagged) query = query.eq("flagged", true).or("status.is.null,status.neq.deleted");

      const { data, error } = await query;
      grid.innerHTML = "";
      metaRow.textContent = opts.title || "";

      if (error){ grid.innerHTML = `<p style="color:#c0392b">Error loading stores: ${error.message}</p>`; return; }
      if (!data || !data.length){ grid.innerHTML = `<p>No stores found.</p>`; return; }
      data.forEach(s=>renderCard(s, false));
    }

    async function loadTrash(){
      const { data, error } = await supabase
        .from("stores")
        .select("*")
        .eq("status", "deleted")
        .not("deleted_until","is", null)
        .order("deleted_until", { ascending:true });

      grid.innerHTML = "";
      if (error){ metaRow.textContent="Trash"; grid.innerHTML = `<p style="color:#c0392b">Error loading trash: ${error.message}</p>`; return; }
      const count = (data||[]).length;
      metaRow.textContent = `Trash ‚Äî ${count} item${count===1?"":"s"}`;
      if (!count){ grid.innerHTML = `<p>Trash is empty.</p>`; return; }
      data.forEach(s=>renderCard(s, true));
    }

    /* ---------- Helpers ---------- */
    function esc(str){ return String(str ?? "").replace(/[&<>"']/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }
    function stars(n){ n = Number(n||0); return "‚òÖ".repeat(n) + "‚òÜ".repeat(5-n); }
    function cap(s){ return s ? (s[0].toUpperCase()+s.slice(1)) : s; }
    function goldAccess(a){ if(!a) return ""; const txt = a==="members"?"üîí Members Only": a==="temporary"?"‚è≥ Temporary Members":"üåê Public Access"; return `<div class="access-line">${txt}</div>`; }

    function badgeList(store){
      const types = Array.isArray(store.types) ? store.types.map(t=>String(t).toLowerCase()) : (store.type?[store.type.toLowerCase()]:[]);
      return types.length ? types : ["other"];
    }

    function pickImage(store){
      if (store.photo_reference) return store.photo_reference;
      const b = badgeList(store);
      if (b.includes("store")) return "images/store.jpg";
      if (b.includes("lounge")) return "images/lounge.jpg";
      return "images/cafe.jpg";
    }

    function showToast(msg, type="success"){
      const c = document.getElementById("toast-container");
      const t = document.createElement("div");
      t.className = `toast ${type}`;
      t.textContent = msg;
      c.appendChild(t);
      setTimeout(()=> t.remove(), 2600);
    }

    /* ---------- Card Rendering (view or trash) ---------- */
    function renderCard(store, isTrash){
      const card = document.createElement("div");
      card.className = "card";
      card.dataset.id = store.id;

      // Header image
      card.innerHTML = `<img class="thumb" src="${pickImage(store)}" alt="${esc(store.name||'')}" />`;

      // Content
      const content = document.createElement("div");
      content.className = "card-content";
      card.appendChild(content);

      // Badges row (gold for frontend data)
      const types = badgeList(store);
      const badges = document.createElement("div");
      badges.className = "badges";
      if (store.flagged) badges.innerHTML += `<span class="badge flag">Flagged</span>`;
      badges.innerHTML += types.map(t=>`<span class="badge ${esc(t)}">${esc(cap(t))}</span>`).join(" ");
      content.appendChild(badges);

      // Title + address
      const name = document.createElement("h3");
      name.style.margin = ".1rem 0 .25rem";
      name.textContent = store.name || "Unnamed";
      content.appendChild(name);

      content.innerHTML += `
        <div class="small">${esc(store.address||"")}</div>
        <div class="small">${esc(store.city||"")}${store.city?", ":""}${esc(store.country||"")}</div>
        ${types.includes("lounge") && store.access ? goldAccess(store.access) : ""}
        <div class="rating">${stars(store.rating||0)}</div>
        <div class="small">${store.approved ? "‚úÖ Approved" : (store.status==="deleted" ? "üóëÔ∏è In Trash" : "‚è≥ Pending")}</div>
        <div class="date">${store.created_at ? new Date(store.created_at).toLocaleDateString() : ""}</div>
      `;

      // Buttons
      const row = document.createElement("div");
      row.className = "btn-row";
      if (isTrash){
        // Trash actions
        const now = Date.now();
        const until = store.deleted_until ? new Date(store.deleted_until).getTime() : 0;
        const diffH = Math.ceil((until - now)/(1000*60*60));
        const statusHtml = diffH<=0
          ? `<div class="trash-status expired">üî• Expired</div>`
          : `<div class="trash-status time-remaining">‚è∞ ${diffH}h remaining</div>`;
        content.innerHTML += statusHtml;

        const restore = document.createElement("button");
        restore.className = "btn restore";
        restore.textContent = "Restore";
        restore.onclick = ()=> restoreStore(store.id);

        const perma = document.createElement("button");
        perma.className = "btn delete";
        perma.textContent = "Delete";
        perma.onclick = ()=> permanentDelete(store.id);

        row.appendChild(restore);
        row.appendChild(perma);
      } else {
        // Active view actions: Approve / Flag / Edit / Delete
        const approve = document.createElement("button");
        approve.className = "btn approve";
        approve.textContent = "Approve";
        approve.onclick = ()=> updateStatus(store.id, true);

        const flag = document.createElement("button");
        flag.className = "btn flag";
        flag.textContent = store.flagged ? "Unflag" : "Flag";
        flag.onclick = ()=> toggleFlag(store.id, !!store.flagged);

        const edit = document.createElement("button");
        edit.className = "btn";
        edit.textContent = "Edit";
        edit.onclick = ()=> enterEdit(card, store);

        const del = document.createElement("button");
        del.className = "btn delete";
        del.textContent = "Delete";
        del.onclick = ()=> softDelete(store.id);

        row.appendChild(approve);
        row.appendChild(flag);
        row.appendChild(edit);
        row.appendChild(del);
      }
      card.appendChild(row);

      grid.appendChild(card);
    }

    /* ---------- Inline Edit (expand card) ---------- */
    function enterEdit(card, store){
      const content = card.querySelector(".card-content");
      const row = card.querySelector(".btn-row");
      content.innerHTML = ""; // clear view

      const types = badgeList(store);
      const loungeSelected = types.includes("lounge");

      // Title
      const title = document.createElement("h3");
      title.style.margin = ".1rem 0 .5rem";
      title.textContent = `Edit: ${store.name || "Unnamed"}`;
      content.appendChild(title);

      // Edit form
      const editWrap = document.createElement("div");
      editWrap.className = "edit-wrap";
      editWrap.innerHTML = `
        <!-- Edit section start -->
        <div class="form-grid">
          <div>
            <label>Name</label>
            <input type="text" id="e_name" value="${esc(store.name||"")}">
          </div>
          <div>
            <label>Phone</label>
            <input type="tel" id="e_phone" value="${esc(store.phone||"")}">
          </div>

          <div class="full">
            <label>Address</label>
            <input type="text" id="e_address" value="${esc(store.address||"")}">
          </div>

          <div>
            <label>City</label>
            <input type="text" id="e_city" value="${esc(store.city||"")}">
          </div>
          <div>
            <label>Country</label>
            <input type="text" id="e_country" value="${esc(store.country||"")}">
          </div>

          <div class="full">
            <label>Website</label>
            <input type="url" id="e_website" value="${esc(store.website||"")}">
          </div>

          <div class="full">
            <label>Types</label>
            <div class="type-group" id="e_types">
              ${["store","lounge","other"].map(t=>{
                const on = types.includes(t) ? "active" : "";
                return `<span class="type-pill ${on}" data-type="${t}">${cap(t)}</span>`;
              }).join("")}
            </div>
          </div>

          <div class="full">
            <label>Rating</label>
            <div class="stars" id="e_stars">${[1,2,3,4,5].map(i=>`<span class="star ${i <= (store.rating||0) ? "on":""}" data-v="${i}">‚òÖ</span>`).join("")}</div>
          </div>

          <div class="full" id="e_access_wrap" style="${loungeSelected?'':'display:none;'}">
            <label>Lounge Access</label>
            <div class="access-group" id="e_access">
              <label><input type="radio" name="access" value="public" ${store.access==="public"?"checked":""}/> Public</label>
              <label><input type="radio" name="access" value="temporary" ${store.access==="temporary"?"checked":""}/> Temporary</label>
              <label><input type="radio" name="access" value="members" ${store.access==="members"?"checked":""}/> Members Only</label>
            </div>
          </div>
        </div>
        <!-- Edit section end -->
      `;
      content.appendChild(editWrap);

      // Save/Cancel row
      row.innerHTML = "";
      const save = document.createElement("button");
      save.className = "btn save";
      save.textContent = "Save";
      save.onclick = ()=> saveEdit(card, store);
      const cancel = document.createElement("button");
      cancel.className = "btn cancel";
      cancel.textContent = "Cancel";
      cancel.onclick = ()=> reloadCurrent();
      row.appendChild(save);
      row.appendChild(cancel);

      // Wire up types toggle + stars
      const typeWrap = editWrap.querySelector("#e_types");
      typeWrap.querySelectorAll(".type-pill").forEach(p=>{
        p.addEventListener("click", ()=>{
          p.classList.toggle("active");
          const hasLounge = Array.from(typeWrap.querySelectorAll(".type-pill.active")).some(x=>x.dataset.type==="lounge");
          editWrap.querySelector("#e_access_wrap").style.display = hasLounge ? "block":"none";
        });
      });
      editWrap.querySelectorAll("#e_stars .star").forEach(st=>{
        st.addEventListener("click", ()=>{
          const v = Number(st.dataset.v);
          editWrap.querySelectorAll("#e_stars .star").forEach(s2=>{
            s2.classList.toggle("on", Number(s2.dataset.v) <= v);
          });
        });
      });
    }

    async function saveEdit(card, store){
      const name = card.querySelector("#e_name").value.trim();
      const phone = card.querySelector("#e_phone").value.trim();
      const address = card.querySelector("#e_address").value.trim();
      const city = card.querySelector("#e_city").value.trim();
      const country = card.querySelector("#e_country").value.trim();
      const website = card.querySelector("#e_website").value.trim();

      const types = Array.from(card.querySelectorAll("#e_types .type-pill.active")).map(x=>x.dataset.type);
      const rating = Array.from(card.querySelectorAll("#e_stars .star.on")).length;
      const access = card.querySelector("#e_access input[name='access']:checked")?.value || null;

      const payload = { name, phone, address, city, country, website, rating, access, types };
      // Normalize: if no types array, fallback to single type
      if (!types.length) { payload.type = store.type || "other"; payload.types = null; }

      const { error } = await supabase.from("stores").update(payload).eq("id", store.id);
      if (error){ showToast("Update failed.", "error"); return; }
      showToast("Store updated successfully!", "success");
      reloadCurrent();
    }

    /* ---------- Actions ---------- */
    async function updateStatus(id, approved){
      const { error } = await supabase.from("stores").update({ approved }).eq("id", id);
      if (error) showToast("Failed to update status","error"); else { showToast("Status updated","success"); reloadCurrent(); }
    }
    async function toggleFlag(id, flagged){
      const { error } = await supabase.from("stores").update({ flagged: !flagged }).eq("id", id);
      if (error) showToast("Failed to toggle flag","error"); else { showToast(flagged?"Unflagged":"Flagged","success"); reloadCurrent(); }
    }
    async function softDelete(id){
      // 48h restore window
      const deletedUntil = new Date(Date.now() + 48*60*60*1000).toISOString();
      const { error } = await supabase.from("stores").update({ status:"deleted", deleted_until:deletedUntil }).eq("id", id);
      if (error) showToast("Failed to move to Trash","error"); else { showToast("Moved to Trash (48h)","success"); reloadCurrent(); }
    }
    async function restoreStore(id){
      const { error } = await supabase.from("stores").update({ status:"pending", deleted_until:null }).eq("id", id);
      if (error) showToast("Failed to restore","error"); else { showToast("Restored","success"); route("home"); }
    }
    async function permanentDelete(id){
      const { error } = await supabase.from("stores").delete().eq("id", id);
      if (error) showToast("Failed to delete permanently","error"); else { showToast("Deleted permanently","success"); reloadCurrent(); }
    }

    function reloadCurrent(){ route(currentView); }
  </script>
</body>
</html>
